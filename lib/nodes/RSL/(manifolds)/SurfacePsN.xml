<?xml version="1.0"?>

<node name="SurfacePsN" author="Pixar">
	<help>Returns the 3D point on the surface of your object.</help>
	<input>
		<property name="Space" type="string" default="" detail="uniform" subtype="place3d">
		<help>The name of a coordinate system for the manifold.
		    In addition to your custom coordinate systems
		    you can use "current", "world", "object", "shader"
		    "NDC" (screen coordinates), and "ST" (parametric
		    coordinates).</help>
		</property>
		<property name="stFrequency" type="float" default="1" subtype="slider" range="0 10 .001">
		<help>Controls the scale of the ST parameterization.  
		    Note that increasing the frequency will result in 
		    decreasing the scale of a feature.</help>
		</property>
		<property name="IgnorePref" type="float" default="1" subtype="switch">
		<help>If you have attached __Pref geometry and,
		    for debugging purposes, want to ignore it, click
		    here.  Note that it's much more efficient to simply
		    remove the reference geometry if it's not needed.</help>
		</property>
	  <property name="__Pref" type="point" default="point(-1,-1,-1)" detail="varying" provider="primitive"/>	
	</input>
	<output>
		<property name="Q" type="point"/>
		<property name="QN" type="normal"/>		
		<property name="duQ" type="vector"/>	
		<property name="dvQ" type="vector"/>	
		
	</output>
	<internal>
	</internal>
	<code>
  <![CDATA[

	if ( $(Space) == "ST" )
  {
    $(Q) = point( s * $(stFrequency), t * $(stFrequency), 0 );
  } 
  else if ( $(IgnorePref) == 0 && 1 == surface("__Pref", $(Q) ) ) 
	{
	  if( $(Space) != "" )
	  {
			if ( xcomp( $(Q) ) == -1e10 ) 
			{
		    $(Q) = transform($(Space), Ps);
		    $(QN) = ntransform($(Space), N);
			}
			else
			{
		    $(Q) = transform($(Space), $(Q) ); // Q contains __Pref
		    $(QN) = calculatenormal( $(Q) );
			}
	  }
	  else
	  {
			if ( xcomp( $(Q) ) == -1e10 ) 
			{
		    $(Q) = Ps;
		    $(QN) = N;
			}
			else
			{
		     // Q contains __Pref
		    $(QN) = calculatenormal(Q);
			}
	  }
	}
	else
	{
    $(Q) = transform($(Space), Ps);
    QN = ntransform($(Space), N);
	}
  
  
  $(duQ) = vector Du( $(Q) ) * du;
  $(dvQ) = vector Dv( $(Q) ) * dv;
	]]>	
  </code>	
</node>
