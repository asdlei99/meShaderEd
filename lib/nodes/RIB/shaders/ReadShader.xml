<?xml version="1.0"?>

<node name="ReadShader" author="mesh" type="rib_code">
  <help>Read compiled shader</help>
  <input>
    <property name="Reload" label="Shader Parameters" btext="Reload" type="control" default="" provider="attribute" subtype="button">
<code>
<![CDATA[
print ":: Hello from (%s) XML control_code !!!" % self.label
if node is not None :
  print ":: Node = %s" % node.label
  from core.utils.ShaderInfo import ShaderInfo
  shaderInfo = ShaderInfo ( node.getInputParamByName ( 'file_name' ).value )

  print '** shader type = %s' % shaderInfo.type

  node.getInputParamByName ( 'shader_name' ).value = shaderInfo.name
  node.getInputParamByName ( 'shader_type' ).value = shaderInfo.type
  node.getInputParamByName ( 'rib_shader_type' ).value = node.getRiCallForShaderType ( shaderInfo.type )
  node.getInputParamByName ( 'shader_params' ).value = ''

  lastInputParam = node.getInputParamByName ( 'shader_params' )
  lastOutputParam = node.getOutputParamByName ( 'shader' )

  lastInputParamIdx = node.inputParams.index ( lastInputParam )
  lastOutputParamIdx = node.outputParams.index ( lastOutputParam )

  print '*** removing input params ***'
  
  while lastInputParamIdx < ( len ( node.inputParams ) - 1 ) :
    param = node.inputParams.pop ()
    print param.name, param.type

  print '*** removing output params ***'
  while lastOutputParamIdx < ( len ( node.outputParams ) - 1 ) :
    param = node.outputParams.pop ()
    print param.name, param.type

  print '*** added input params ***'
  for param in shaderInfo.inputParams :
    if param.arraySize is None :
      param.removable = True
      node.addInputParam ( param )
      print param.name, param.type

  print '*** added output params ***'
  for param in shaderInfo.outputParams :
    if param.arraySize is None :
      param.removable = True
      node.addOutputParam ( param )
      print param.name, param.type

  node.nodenet.renameNodeLabel ( node, shaderInfo.name )
  node.updateNode ( True )


]]>
</code>
    </property>
    <property name="file_name" label="File Name" type="string" default="" subtype="file" range="${Renderer} ${SLO}=*.${SLO}:All files=*.*"/>
    <property name="Color" type="color" default="0 0 1" provider="attribute"/>
    <property name="Opacity" type="color" default="1 1 1" provider="attribute"/>
    <property name="shader_name" label="Shader Name" type="string" provider="attribute" default="null" display="1" enabled="0"/>
    <property name="shader_type" label="Shader Type" type="string" provider="attribute" default="surface" enabled="0"
      subtype="selector"
      range = "Surface=surface:Displacement=displacement:Light=light:Volume=volume:Shader=shader"/>
    <property name="rib_shader_type" type="string" provider="attribute" default="Surface" display="0" enabled="0"/>
    <property name="shader_params" type="string" provider="attribute" default="" display="0"/>

  </input>
  <output>
    <property name="shader" label="Surface" type="rib" default=""/>
  </output>
<control_code>
<![CDATA[
print ":: Hello from (%s) XML control_code !!!" % self.label
lastInputParam = self.getInputParamByName ( 'shader_params' )
lastInputParamIdx = self.inputParams.index ( lastInputParam )


ribInputParamsDeclaration = []

for i in range ( lastInputParamIdx + 1, len ( self.inputParams ) ) :
  declStr = self.getParamDeclaration ( self.inputParams [ i ] )
  ribInputParamsDeclaration.append ( declStr )
  print declStr

self.getInputParamByName ( 'shader_params' ).value = ''
if len ( ribInputParamsDeclaration ) > 0 :
  self.getInputParamByName ( 'shader_params' ).value = ( ' ' ).join ( ribInputParamsDeclaration )


]]>
</control_code>

<code>
<![CDATA[
    Color [$(Color)]
    Opacity [$(Opacity)]
    $(rib_shader_type) "$(shader_name)" $(shader_params)
]]>
</code>
</node>
