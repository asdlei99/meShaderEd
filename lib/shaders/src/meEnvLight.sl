/*
** Copyright (c) 2001 PIXAR.  All rights reserved.  This program or
** documentation contains proprietary confidential information and trade
** secrets of PIXAR.  Reverse engineering of object code is prohibited.
** Use of copyright notice is precautionary and does not imply
** publication.
**
**                      RESTRICTED RIGHTS NOTICE
**
** Use, duplication, or disclosure by the Government is subject to the
** following restrictions:  For civilian agencies, subparagraphs (a) through
** (d) of the Commercial Computer Software--Restricted Rights clause at
** 52.227-19 of the FAR; and, for units of the Department of Defense, DoD
** Supplement to the FAR, clause 52.227-7013 (c)(1)(ii), Rights in
** Technical Data and Computer Software.
**
** Pixar
** 1200 Park Ave
** Emeryville, CA 94608
**
** ----------------------------------------------------------------------------
*/

/* code generated by slim 6.5.2, RAT 6.5.2 (Dec  8 2005 04:40:14) */
/* for mesh@localhost at: Fri Dec 07 16:46:26 FLE Standard Time 2007 */
/* shader modification timestamp: 1197038679 */

/* includes ---------------------------------*/

/* defines ----------------------------------*/
#define SLIM_TYPEID_surface 0
#define SLIM_TYPEID_displacement 1
#define SLIM_TYPEID_volume 2
#define SLIM_TYPEID_light 3
#define SLIM_VERSION 650
#define SLIM_SHADERTYPE light
#define SLIM_SHADERTYPEID SLIM_TYPEID_light
#define SLIM_INSTANCETYPE light
#define SLIM_INSTANCENAME meEnvLight

/* shader body ------------------------------*/
SLIM_SHADERTYPE
SLIM_INSTANCENAME (
  string meEnvMap_EnvMap="";
  string meEnvMap_Space="";
  float meEnvMap_reflBlur=0;
  float meEnvMap_envrad=100.0;
  float meEnvMap_samples=1;
  float meEnvMap_Coloration=0;
  color meEnvMap_cFilt=color(1,1,1);
  string meEnvMap_Filter="gaussian";
  float meEnvMap_Lerp=1;
  float Intensity=1;
  output uniform string __category="environment";
  output uniform float __nondiffuse=1;
  output uniform float __nonspecular=1;
)
{

/* static functions ----------------------*/

	#include "meReflections.h"
	
	  void slmeEnvMap (
    uniform string envname;
		uniform string envspace;
		float	reflBlur;
		uniform float	envrad;
		float	samples;
		float	Coloration;
		color	cFilt;
		uniform string filter;
		uniform float lerp;
		output color result;
	    )
	    {
    		
    		extern vector I;
    		extern normal N;
    		
    		varying float blur;
    		normal Nn = normalize(N);
        normal Nf = faceforward (Nn, I, Nn);
        vector IN = normalize (I);
        vector Rfldir;
        float kr = 1;
    		if(envname != "") {
    		  
    		    if( 0 == surface ("__L", Rfldir) )     
      		     	Rfldir = reflect( IN, normalize(Nf) ); /* normalize(Nf) */ 
      			   		    
    		    if( 0 == surface ("__blur", blur) )
    		    	blur = reflBlur;
        		
    		    color filt = mix (color 1, cFilt, Coloration);
    		       		    
    		    result = filt * meEnvironment ( envname, Rfldir, envspace, envrad, blur, samples, kr, filter, lerp );
           
        } else
      	  result = color(0);
	    }
	  

/* dynamic functions ------------------------*/

/* local variables --------------------------*/
  color tmp0;

/* main body --------------------------------*/
  solar () {
    /* generate (all) ----------- */
    slmeEnvMap ( /* meEnvMap */
      meEnvMap_EnvMap, /* Environment Map */
      meEnvMap_Space, /* Coordinate System */
      meEnvMap_reflBlur, /* Reflection Blur */
      meEnvMap_envrad, /* envrad */
      meEnvMap_samples, /* samples */
      meEnvMap_Coloration, /* Coloration */
      meEnvMap_cFilt, /* Environment Tint */
      meEnvMap_Filter, /* Filter */
      meEnvMap_Lerp, /* Lerp */
      tmp0  /* output */ 
      );
    Cl = tmp0;
    Cl *= Intensity;
  }
}

